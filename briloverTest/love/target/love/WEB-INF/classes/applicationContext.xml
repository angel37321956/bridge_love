<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 1 配置哪些类需要Spring容器管理 -->
	<context:component-scan base-package="com.bridge.love">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 2 spring 加载外部连接数据库的配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" system-properties-mode="NEVER" />

	<!-- 3 项目使用哪个数据库 在我们的jdbc的基础上进一步封装 数据库连接池 目的就是为了加快数据库连接的速度 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>
	

	<!-- myBatis文件 有2个配置 开始 -->
	<!-- myBatis和Spring的整合 01 配置xml文件所在的目录 -->
	<bean id="mybatisXmlConfig" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<!-- 只要在com.szrt.ssm.exam这个包及其子包下面所有以xml结尾的文件都接受mybatis的管理 -->
		<property name="mapperLocations" value="classpath*:com.bridge.love/**/*.xml" />
	</bean>

	<!-- myBatis和Spring的整合 02 配置dao文件所在的目录 接口绑定 -->
	<bean id="mybatisDaoConfig" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bridge.love.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="mybatisXmlConfig" />
	</bean>
	<!-- myBatis文件 有2个配置 结束 -->


	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 开启注解配置 -->  
    <context:annotation-config />  
	<!--启动spring注解功能-->
	<!-- Spring可以管理事务 事务有2中配置方法   2.1 基于xml 2.2基于注解来管理事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 1. 配置事务管理器 -->
	<!-- 把事务交给Spring容器去管理  就不需要手动提交事务 也不需要手动回滚事务 AOP -->
	<!-- 事务 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <aop:config>
        <aop:pointcut expression="execution(* com.bridge.love.*.service.*.*(..))"
            id="pointCut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="login*" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
	<import resource="classpath:spring-shiro.xml" />

</beans>
